---
- hosts: jenkins
  vars_files:
    - vars.yml
  tasks:

   - name: Install useful packages
     apt:
       pkg: "{{ packages }}"
       state: present
     become: true

   - name: Create user
     user:
       name: "{{ user.name }}"
       create_home: yes
       groups: sudo
       append: yes
       shell: /bin/bash
   - name: Set home folder
     set_fact:
       home: "/home/{{ user.name }}"

   - name: Create home folder structure
     file:
       path: "{{ home }}/{{ item }}"
       state: directory
       owner: "{{ user.name }}"
       group: "{{ user.name }}"
       mode: 0755
     with_items:
       - "{{ home_folders.tools_folder }}"
       - "{{ home_folders.additional_folders }}"

   - name: Ensure .ssh folder
     file:
       path: "{{ home }}/.ssh"
       state: directory
       owner: "{{ user.name }}"
       group: "{{ user.name }}"
   - name: Add private ssh key
     copy:
       src: vault/vps_rsa
       dest: "/home/{{ user.name }}/.ssh/id_rsa"
       owner: "{{ user.name }}"
       group: "{{ user.name }}"
       mode: "500"
   - name: Add public ssh key
     copy:
       src: vault/vps_rsa.pub
       dest: "/home/{{ user.name }}/.ssh/id_rsa.pub"
       owner: "{{ user.name }}"
       group: "{{ user.name }}"

   - name: Add to sudoers
     copy:
       dest: /etc/sudoers.d/{{ user.name }}
       content: |
                {{ user.name }}  ALL=(ALL) ALL
                {{ user.name }}  ALL=(plone_daemon, plone_buildout) NOPASSWD:ALL
                {{ user.name }}  ALL=(root) NOPASSWD:/usr/bin/supervisorctl
                #

   - name: Ensure ~/.local is owned by user
     file:
       path: "{{ home }}/.local"
       state: directory
       mode: 0755
       owner: "{{ user.name }}"
       group: "{{ user.name }}"

   - name: Setup dotfiles
     become: true
     become_user: "{{ user.name }}"
     block:
       - name: Clone the dotfiles repo
         git:
           repo: "{{ dotfiles_url }}"
           accept_hostkey: yes
           dest: "{{ home }}/.local/dotfiles"
           update: false
           key_file:  "{{ home }}/.ssh/id_rsa"
         register: dotfiles
       - name: Deploy dotfiles
         shell: "{{ home }}/.local/dotfiles/scripts/deploy.sh"
         when: dotfiles.changed
     tags: dotfiles

   - name: Setup private dotfiles
     become: true
     become_user: "{{ user.name }}"
     block:
       - name: Clone the private dotfiles repo
         git:
           repo: "{{ private_dotfiles_url }}"
           accept_hostkey: yes
           dest: "{{ home }}/.local/utils"
           update: false
           key_file:  "{{ home }}/.ssh/id_rsa"
         register: private_dotfiles
       - name: Deploy dotfiles
         shell: "{{ home }}/.local/utils/laptop/deploy.sh"
         when: private_dotfiles.changed
     tags: dotfiles, private

   - name: Clone the ansible repo
     become: true
     become_user: "{{ user.name }}"
     git:
       repo: git@github.com:tiannaru/ansible-jenkins-server.git
       accept_hostkey: yes
       dest: "{{ home }}/ansible-jenkins-server"
       key_file:  "{{ home }}/.ssh/id_rsa"
       update: false

   - name: Clone the jcasc repo
     become: true
     become_user: "{{ user.name }}"
     git:
       repo: git@github.com:tiannaru/jcasc.git
       accept_hostkey: yes
       dest: "{{ home }}/jcasc"
       key_file:  "{{ home }}/.ssh/id_rsa"
       update: false

   - name: docker block
     become: true
     block:
     - name: Install docker packages
       apt:
         name: "{{ item }}"
         state: present
         update_cache: yes
       with_items:
         - apt-transport-https
         - ca-certificates
         - curl
         - software-properties-common
       tags:
         - docker
     - name: Add Docker s official GPG key
       apt_key:
         url: https://download.docker.com/linux/debian/gpg
         state: present
       tags:
         - docker
     - name: Verify that we have the key with the fingerprint
       apt_key:
         id: 0EBFCD88
         state: present
       tags:
         - docker
     - name: Set up the stable repository
       apt_repository:
         repo: deb [arch=amd64] https://download.docker.com/linux/debian buster stable
         state: present
         update_cache: yes
       tags:
         - docker
     - name: Update apt packages
       apt:
         update_cache: yes
       tags:
         - docker
     - name: Install docker
       apt:
         name: docker-ce
         state: present
         update_cache: yes
       #notify: Start docker on boot
       tags:
         - docker
     - name: Add user to "docker" group
       user:
         name: "{{ user.name }}"
         groups: "docker"
         append: yes
       tags:
         - docker
     - name: Install docker-compose
       get_url: 
         url : https://github.com/docker/compose/releases/download/1.25.1-rc1/docker-compose-Linux-x86_64
         dest: /usr/local/bin/docker-compose
         mode: 'u+x,a+x'
     - name: install python req for ansible docker
       pip:
         name: docker
         executable: pip3

     # I should rather just pull the image instead, shouldn't I?
     - name: Build jenkins docker image
       community.docker.docker_image:
         name: jenkins
         source: build
         tag: jcasc
         build:
           path: "{{ home }}/jcasc/"

     # I should rather just pull the image instead, shouldn't I?
     - name: Build nginx docker image
       docker_image:
         name: reverseproxy
         source: build
         tag: latest
         build:
           path: "{{ home }}/ansible-jenkins-server/dockerfiles"
           dockerfile: "{{ home }}/ansible-jenkins-server/dockerfiles/nginx.Dockerfile"
   
     - name: Ensure docker-compose service
       block:
       - name: add lib folder
         become: true
         copy: 
           src: "{{ home }}/ansible-jenkins-server/dockerfiles/"
           remote_src: yes
           dest: /var/lib/docker-compose
           owner: root
           group: root
           mode: '0755'
       # TODO: ensure we have certs in /etc/letsencrypt/data/certs
       # TODO: ensure we have an .env file in /var/lib/docker-compose
       # TODO: ensure docker is opening port 50000
       - name: ensure cert is in lib
         become: true
         copy: 
           src: /etc/letsencrypt/live/404n-amgasit.ro/fullchain.pem
           remote_src: yes
           dest: /var/lib/docker-compose/
           owner: root
           group: root
           mode: '0755'
       - name: ensure privkey is in lib
         become: true
         copy: 
           src: /etc/letsencrypt/live/404n-amgasit.ro/privkey.pem
           remote_src: yes
           dest: /var/lib/docker-compose/
           owner: root
           group: root
           mode: '0755'
       - name: copy docker-compose service file
         become: true
         copy: 
           src: dockerfiles/config_files/docker-compose.service
           dest: /etc/systemd/system/docker-compose.service
           owner: root
           group: root
           mode: '0755'
           # TODO: should also make sure to daemon-reload
       - name: enable docker-compose sevice
         become: true
         service:
           name: docker-compose
           enabled: yes
           state: started
